-----------------Problem 1.	Number of Users for Email Provider

SELECT RIGHT(u.Email, LEN(u.Email) - CHARINDEX('@', u.Email)) AS 'Email Provider'
,COUNT(Id)  'Number Of Users'
FROM   Users AS u
GROUP BY (RIGHT(u.Email, LEN(u.Email) - CHARINDEX('@', u.Email)))
ORDER BY 'Number Of Users' DESC, 'Email Provider' ASC

-----------------Problem 2.	All User in Games
--Find all user in games with information about them. Display the game name, 
--game type, username, level, cash and character name. Sort the result by level
--in descending order, then by username and game in alphabetical order. Submit 
--your query statement as Prepare DB & run queries in Judge.

SELECT g.Name
	,gt.Name
	,u.Username	
	,ug.Level
	,ug.Cash
	,c.Name
FROM Games AS g
JOIN GameTypes AS gt ON gt.Id = g.GameTypeId
JOIN UsersGames AS ug ON ug.GameId = g.Id
JOIN Users AS u ON u.Id = ug.UserId
JOIN Characters AS c ON c.Id = ug.CharacterId
ORDER BY ug.Level DESC, u.Username ASC, g.Name ASC

-----------------Problem 3.	Users in Games with Their Items
--Find all users in games with their items count and items price.
--Display the username, game name, items count and items price. 
--Display only user in games with items count more or equal to 10. 
--Sort the results by items count in descending order then by price in 
--descending order and by username in ascending order. Submit your query 
--statement as Prepare DB & run queries in Judge.

SELECT u.Username
	, g.Name AS Game
	, COUNT(i.Id) AS 'Items Count'
	, SUM(i.Price) AS 'Items Price'
	FROM Users AS u
JOIN UsersGames AS ug ON u.Id = ug.UserId
JOIN Games AS g ON g.Id = ug.GameId
JOIN UserGameItems AS ugi ON ugi.UserGameId = ug.Id
JOIN Items AS i ON i.Id = ugi.ItemId
GROUP BY u.Username, g.Name
HAVING COUNT(i.Id) >= 10
ORDER BY 'Items Count' DESC, 'Items Price' DESC, u.Username ASC


-----------------Problem 4.	* User in Games with Their Statistics

select 
	u.UserName, 
	g.name as game, 
	MAX(c.name) as ch,
	SUM(its.strength) + MAX(gts.strength) + MAX(cs.strength) as strength,
	SUM(its.defence) + MAX(gts.defence) + MAX(cs.defence) as defence,
	SUM(its.speed) + MAX(gts.speed) + MAX(cs.speed) as speed,
	SUM(its.mind) + MAX(gts.mind) + MAX(cs.mind) as mind,
	SUM(its.luck) + MAX(gts.luck) + MAX(cs.luck) as luck
from Users u
join UsersGames ug on ug.UserId = u.id
join Games g on ug.Gameid = g.id
join Gametypes gt on gt.id = g.GameTypeId
join [Statistics] gts on gts.id = gt.BonusStatsId
join Characters c on ug.CharacterId = c.id
join [Statistics] cs on cs.id = c.StatisticId
join UserGameItems ugi on ugi.UserGameId = ug.Id
join items i on i.id = ugi.ItemId
join [Statistics] its on its.Id = i.StatisticId
group by u.UserName, g.name
order by strength desc, defence desc, speed desc, mind desc, luck des

-----------------Problem 5.	All Items with Greater than Average Statistics

SELECT i.Name, i.Price, i.MinLevel, s.Strength, s.Defence, s.Speed, s.Luck, s.Mind
FROM Items AS i
JOIN [Statistics] AS s ON s.Id = i.StatisticId
WHERE s.Mind > (SELECT AVG(Mind) FROM [Statistics]) AND 
	s.Luck > (SELECT AVG(Luck) FROM [Statistics]) AND
	s.Speed > (SELECT AVG(Speed) FROM [Statistics])
ORDER BY i.Name

-----------------Problem 6.	Display All Items with Information about Forbidden Game Type

SELECT i.Name AS Item, i.Price, i.MinLevel, gt.Name AS [Forbidden Game Type]
FROM Items AS i
left JOIN GameTypeForbiddenItems AS gtfi ON gtfi.ItemId = i.Id
left JOIN GameTypes AS gt ON gt.Id = gtfi.GameTypeId
ORDER BY gt.Name DESC, i.Name ASC


-----------------Problem 7.	Buy Items for User in Game
--1.	User Alex is in the shop in the game “Edinburgh” and she wants to buy some items. 
--She likes Blackguard, Bottomless Potion of Amplification, Eye of Etlich (Diablo III), 
--Gem of Efficacious Toxin, Golden Gorget of Leoric and Hellfire Amulet. Buy the items. 
--You should add the data in the right tables. Get the money for the items from user in game Cash.
--2.	Select all users in the current game with their items. 
--Display username, game name, cash and item name. Sort the result by item name.
--Submit your query statements as Prepare DB & run queries in Judge.

SELECT 
	u.Username AS [Username],
	g.Name AS [Name],
	ug.Cash AS [Cash], 
	i.Name AS [Item Name]
FROM Users AS u
	JOIN UsersGames AS ug ON u.Id = ug.UserId
	JOIN Games AS g ON ug.GameId = g.Id
	JOIN UserGameItems AS ugi ON ug.Id = ugi.UserGameId
	JOIN Items AS i ON ugi.ItemId = i.Id
WHERE g.Name = 'Edinburgh'
ORDER BY [Item Name]

--2

INSERT INTO UserGameItems (ItemId,UserGameId)
VALUES (
	(
	SELECT Id
	FROM Items
	WHERE Name = 'Hellfire Amulet'
	),
	(
	SELECT ug.Id
	FROM UsersGames AS ug
		JOIN Users AS u ON ug.UserId = u.Id
		JOIN Games AS g ON ug.GameId = g.Id
	WHERE u.Username = 'Alex' AND g.Name = 'Edinburgh'
	)
)

UPDATE UsersGames
SET Cash = (
	SELECT ug.Cash - i.Price
	FROM UsersGames AS ug 
		JOIN UserGameItems AS ugi ON ug.Id = ugi.UserGameId
		JOIN Items AS i ON ugi.ItemId = i.Id
		JOIN Users AS u ON ug.UserId = u.Id
		JOIN Games AS g ON ug.GameId = g.Id
	WHERE u.Username = 'Alex' AND g.Name = 'Edinburgh' AND i.Name = 'Hellfire Amulet'
)
WHERE Id = 235

-----------------Problem 8.	Peaks and Mountains
--Find all peaks along with their mountain sorted by elevation (from the highest to the lowest),
--then by peak name alphabetically. Display the peak name, mountain range name and elevation

SELECT p.PeakName, m.MountainRange, p.Elevation
FROM Peaks AS p
JOIN Mountains AS m ON m.Id = p.MountainId
ORDER BY p.Elevation DESC, p.PeakName ASC

-----------------Problem 9.	Peaks with Their Mountain, Country and Continent
--Find all peaks along with their mountain, country and continent. 
--When a mountain belongs to multiple countries, display them all. 
--Sort the results by peak name alphabetically, then by country name alphabetically. 

SELECT p.PeakName, m.MountainRange, c.CountryName, cn.ContinentName
FROM Peaks AS p
JOIN Mountains AS m ON m.Id = p.MountainId
JOIN MountainsCountries AS mc ON mc.MountainId = m.Id
JOIN Countries AS c ON mc.CountryCode = c.CountryCode
JOIN Continents AS cn ON c.ContinentCode = cn.ContinentCode
ORDER BY p.PeakName, c.CountryName

-----------------Problem 10.	Rivers by Country
--For each country in the database, display the number of rivers
--passing through that country and the total length of these rivers.
--When a country does not have any river, display 0 as rivers count 
--and as total length. Sort the results by rivers count (from largest to smallest),
--then by total length (from largest to smallest), then by country alphabetically.

SELECT c.CountryName
	, cn.ContinentName
	, Count(r.Id) as [RiverCount]
	, ISNULL(SUM(r.Length), 0) AS [TotalLength]
FROM Countries AS c
	JOIN Continents AS cn ON cn.ContinentCode = c.ContinentCode
	LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
	LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY c.CountryName, cn.ContinentName
ORDER BY Count(r.Id) DESC, SUM(r.Length) DESC, c.CountryName ASC






