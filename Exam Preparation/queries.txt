-----------------Problem 1.	Number of Users for Email Provider

SELECT RIGHT(u.Email, LEN(u.Email) - CHARINDEX('@', u.Email)) AS 'Email Provider'
,COUNT(Id)  'Number Of Users'
FROM   Users AS u
GROUP BY (RIGHT(u.Email, LEN(u.Email) - CHARINDEX('@', u.Email)))
ORDER BY 'Number Of Users' DESC, 'Email Provider' ASC

-----------------Problem 2.	All User in Games
--Find all user in games with information about them. Display the game name, 
--game type, username, level, cash and character name. Sort the result by level
--in descending order, then by username and game in alphabetical order. Submit 
--your query statement as Prepare DB & run queries in Judge.

SELECT g.Name
	,gt.Name
	,u.Username	
	,ug.Level
	,ug.Cash
	,c.Name
FROM Games AS g
JOIN GameTypes AS gt ON gt.Id = g.GameTypeId
JOIN UsersGames AS ug ON ug.GameId = g.Id
JOIN Users AS u ON u.Id = ug.UserId
JOIN Characters AS c ON c.Id = ug.CharacterId
ORDER BY ug.Level DESC, u.Username ASC, g.Name ASC

-----------------Problem 3.	Users in Games with Their Items
--Find all users in games with their items count and items price.
--Display the username, game name, items count and items price. 
--Display only user in games with items count more or equal to 10. 
--Sort the results by items count in descending order then by price in 
--descending order and by username in ascending order. Submit your query 
--statement as Prepare DB & run queries in Judge.

SELECT u.Username
	, g.Name AS Game
	, COUNT(i.Id) AS 'Items Count'
	, SUM(i.Price) AS 'Items Price'
	FROM Users AS u
JOIN UsersGames AS ug ON u.Id = ug.UserId
JOIN Games AS g ON g.Id = ug.GameId
JOIN UserGameItems AS ugi ON ugi.UserGameId = ug.Id
JOIN Items AS i ON i.Id = ugi.ItemId
GROUP BY u.Username, g.Name
HAVING COUNT(i.Id) >= 10
ORDER BY 'Items Count' DESC, 'Items Price' DESC, u.Username ASC


-----------------Problem 4.	* User in Games with Their Statistics

select 
	u.UserName, 
	g.name as game, 
	MAX(c.name) as ch,
	SUM(its.strength) + MAX(gts.strength) + MAX(cs.strength) as strength,
	SUM(its.defence) + MAX(gts.defence) + MAX(cs.defence) as defence,
	SUM(its.speed) + MAX(gts.speed) + MAX(cs.speed) as speed,
	SUM(its.mind) + MAX(gts.mind) + MAX(cs.mind) as mind,
	SUM(its.luck) + MAX(gts.luck) + MAX(cs.luck) as luck
from Users u
join UsersGames ug on ug.UserId = u.id
join Games g on ug.Gameid = g.id
join Gametypes gt on gt.id = g.GameTypeId
join [Statistics] gts on gts.id = gt.BonusStatsId
join Characters c on ug.CharacterId = c.id
join [Statistics] cs on cs.id = c.StatisticId
join UserGameItems ugi on ugi.UserGameId = ug.Id
join items i on i.id = ugi.ItemId
join [Statistics] its on its.Id = i.StatisticId
group by u.UserName, g.name
order by strength desc, defence desc, speed desc, mind desc, luck des

-----------------Problem 5.	All Items with Greater than Average Statistics

SELECT i.Name, i.Price, i.MinLevel, s.Strength, s.Defence, s.Speed, s.Luck, s.Mind
FROM Items AS i
JOIN [Statistics] AS s ON s.Id = i.StatisticId
WHERE s.Mind > (SELECT AVG(Mind) FROM [Statistics]) AND 
	s.Luck > (SELECT AVG(Luck) FROM [Statistics]) AND
	s.Speed > (SELECT AVG(Speed) FROM [Statistics])
ORDER BY i.Name

-----------------Problem 6.	Display All Items with Information about Forbidden Game Type

SELECT i.Name AS Item, i.Price, i.MinLevel, gt.Name AS [Forbidden Game Type]
FROM Items AS i
left JOIN GameTypeForbiddenItems AS gtfi ON gtfi.ItemId = i.Id
left JOIN GameTypes AS gt ON gt.Id = gtfi.GameTypeId
ORDER BY gt.Name DESC, i.Name ASC


-----------------Problem 7.	Buy Items for User in Game
--1.	User Alex is in the shop in the game “Edinburgh” and she wants to buy some items. 
--She likes Blackguard, Bottomless Potion of Amplification, Eye of Etlich (Diablo III), 
--Gem of Efficacious Toxin, Golden Gorget of Leoric and Hellfire Amulet. Buy the items. 
--You should add the data in the right tables. Get the money for the items from user in game Cash.
--2.	Select all users in the current game with their items. 
--Display username, game name, cash and item name. Sort the result by item name.
--Submit your query statements as Prepare DB & run queries in Judge.

SELECT 
	u.Username AS [Username],
	g.Name AS [Name],
	ug.Cash AS [Cash], 
	i.Name AS [Item Name]
FROM Users AS u
	JOIN UsersGames AS ug ON u.Id = ug.UserId
	JOIN Games AS g ON ug.GameId = g.Id
	JOIN UserGameItems AS ugi ON ug.Id = ugi.UserGameId
	JOIN Items AS i ON ugi.ItemId = i.Id
WHERE g.Name = 'Edinburgh'
ORDER BY [Item Name]

--2

INSERT INTO UserGameItems (ItemId,UserGameId)
VALUES (
	(
	SELECT Id
	FROM Items
	WHERE Name = 'Hellfire Amulet'
	),
	(
	SELECT ug.Id
	FROM UsersGames AS ug
		JOIN Users AS u ON ug.UserId = u.Id
		JOIN Games AS g ON ug.GameId = g.Id
	WHERE u.Username = 'Alex' AND g.Name = 'Edinburgh'
	)
)

UPDATE UsersGames
SET Cash = (
	SELECT ug.Cash - i.Price
	FROM UsersGames AS ug 
		JOIN UserGameItems AS ugi ON ug.Id = ugi.UserGameId
		JOIN Items AS i ON ugi.ItemId = i.Id
		JOIN Users AS u ON ug.UserId = u.Id
		JOIN Games AS g ON ug.GameId = g.Id
	WHERE u.Username = 'Alex' AND g.Name = 'Edinburgh' AND i.Name = 'Hellfire Amulet'
)
WHERE Id = 235

-----------------Problem 8.	Peaks and Mountains
--Find all peaks along with their mountain sorted by elevation (from the highest to the lowest),
--then by peak name alphabetically. Display the peak name, mountain range name and elevation

SELECT p.PeakName, m.MountainRange, p.Elevation
FROM Peaks AS p
JOIN Mountains AS m ON m.Id = p.MountainId
ORDER BY p.Elevation DESC, p.PeakName ASC

-----------------Problem 9.	Peaks with Their Mountain, Country and Continent
--Find all peaks along with their mountain, country and continent. 
--When a mountain belongs to multiple countries, display them all. 
--Sort the results by peak name alphabetically, then by country name alphabetically. 

SELECT p.PeakName, m.MountainRange, c.CountryName, cn.ContinentName
FROM Peaks AS p
JOIN Mountains AS m ON m.Id = p.MountainId
JOIN MountainsCountries AS mc ON mc.MountainId = m.Id
JOIN Countries AS c ON mc.CountryCode = c.CountryCode
JOIN Continents AS cn ON c.ContinentCode = cn.ContinentCode
ORDER BY p.PeakName, c.CountryName

-----------------Problem 10.	Rivers by Country
--For each country in the database, display the number of rivers
--passing through that country and the total length of these rivers.
--When a country does not have any river, display 0 as rivers count 
--and as total length. Sort the results by rivers count (from largest to smallest),
--then by total length (from largest to smallest), then by country alphabetically.

SELECT c.CountryName
	, cn.ContinentName
	, Count(r.Id) as [RiverCount]
	, ISNULL(SUM(r.Length), 0) AS [TotalLength]
FROM Countries AS c
	JOIN Continents AS cn ON cn.ContinentCode = c.ContinentCode
	LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
	LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY c.CountryName, cn.ContinentName
ORDER BY Count(r.Id) DESC, SUM(r.Length) DESC, c.CountryName ASC

-----------------Problem 11.	Count of Countries by Currency
--Find the number of countries for each currency. Display three columns: 
--currency code, currency description and number of countries. 
--Sort the results by number of countries (from highest to lowest), 
--then by currency description alphabetically. Name the columns exactly like 
--in the table below:CurrencyCode, Currency, NumberOfCountries

SELECT c.CurrencyCode, c.Description AS [Currency], COUNT(cn.CurrencyCode) AS [NumberOfCountries]
FROM Currencies AS c
LEFT JOIN Countries AS cn ON c.CurrencyCode = cn.CurrencyCode
GROUP BY c.CurrencyCode, c.Description
ORDER BY COUNT(cn.CurrencyCode) DESC, c.Description ASC


-----------------Problem 12.	Population and Area by Continent
--For each continent, display the total area and total 
--population of all its countries. Sort the results by population 
--from highest to lowest. 

SELECT cn.ContinentName
	,SUM(CAST(c.AreaInSqKm AS BIGINT)) AS [CountriesArea]
	,SUM(CAST(c.Population AS BIGINT)) AS [CountriesPopulation]
FROM Continents AS cn
JOIN Countries as c ON cn.ContinentCode = c.ContinentCode
GROUP BY cn.ContinentName
ORDER BY [CountriesPopulation] DESC 

-----------------Problem 13.	Monasteries by Country
--1.	Create a table Monasteries(Id, Name, CountryCode). Use auto-increment for the primary key. Create a foreign key between the tables Monasteries and Countries.
--2.	Execute the following SQL script (it should pass without any errors):
--3.	Write a SQL command to add a new Boolean column IsDeleted in the Countries table (defaults to false). Note that there is no "Boolean" type in SQL server, so you should use an alternative and make sure you set the default value properly.
--4.	Write and execute a SQL command to mark as deleted all countries that have more than 3 rivers.
--5.	Write a query to display all monasteries along with their countries sorted by monastery name. Skip all deleted countries and their monasteries.
--Submit your query statements only for subtasks 1, 2, 4 and 5 at once as Prepare DB & run queries in Judge.


CREATE TABLE Monasteries (
	Id INT PRIMARY KEY IDENTITY
	,[Name] NVARCHAR(MAX)
	,CountryCode CHAR(2)
	,FOREIGN KEY (CountryCode) REFERENCES Countries(CountryCode)
)

INSERT INTO Monasteries(Name, CountryCode) VALUES
('Rila Monastery “St. Ivan of Rila”', 'BG'), 
('Bachkovo Monastery “Virgin Mary”', 'BG'),
('Troyan Monastery “Holy Mother''s Assumption”', 'BG'),
('Kopan Monastery', 'NP'),
('Thrangu Tashi Yangtse Monastery', 'NP'),
('Shechen Tennyi Dargyeling Monastery', 'NP'),
('Benchen Monastery', 'NP'),
('Southern Shaolin Monastery', 'CN'),
('Dabei Monastery', 'CN'),
('Wa Sau Toi', 'CN'),
('Lhunshigyia Monastery', 'CN'),
('Rakya Monastery', 'CN'),
('Monasteries of Meteora', 'GR'),
('The Holy Monastery of Stavronikita', 'GR'),
('Taung Kalat Monastery', 'MM'),
('Pa-Auk Forest Monastery', 'MM'),
('Taktsang Palphug Monastery', 'BT'),
('Sümela Monastery', 'TR')

--1
ALTER TABLE Countries
ADD IsDeleted BIT NOT NULL DEFAULT 0

--2
UPDATE Countries
  SET
      IsDeleted = 1
WHERE CountryCode IN
(
    SELECT c.CountryCode
    FROM Countries AS c
         JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
    GROUP BY c.CountryCode
    HAVING COUNT(cr.RiverId) > 3
);

--3
SELECT m.Name AS [Monastery], c.CountryName
FROM Monasteries AS m
JOIN Countries AS c ON c.CountryCode = m.CountryCode
WHERE c.IsDeleted = 0
ORDER BY m.Name

-----------------Problem 14.	Monasteries by Continents and Countries
-- problem assumes that the previous problem is completed successfully without errors.
--1.	Write and execute a SQL command that changes the country named "Myanmar" 
--to its other name "Burma".
--2.	Add a new monastery holding the following information: Name="Hanga Abbey",
--Country="Tanzania".
--3.	Add a new monastery holding the following information: Name="Myin-Tin-Daik",
--Country="Myanmar".
--4.	Find the count of monasteries for each continent and not deleted country.
--Display the continent name, the country name and the count of monasteries. 
--Include also the countries with 0 monasteries. Sort the results by monasteries 
--count (from largest to lowest), then by country name alphabetically. 
--Name the columns exactly like in the table below.
--Submit all your query statements at once as Prepare DB & run queries in Judge.
--Note when you insert the monasteries make sure to specify the country code
--by  the country name (aka use subquery).

--1.
UPDATE Countries 
SET CountryName = 'Burma'
WHERE CountryName = 'Myanmar'

--2
INSERT INTO Monasteries  VALUES
(
	'Hanga Abbey',
	(
		SELECT c.CountryCode
		FROM Countries AS c
		WHERE CountryName = 'Tanzania'
	)
),
--3
(
	'Myin-Tin-Daik',
	(
		SELECT c.CountryCode
		FROM Countries AS c
		WHERE CountryName = 'Myanmar' --OR 'Burma'
	)
)

--4
SELECT cn.ContinentName, c.CountryName, COUNT(m.Id) AS 'MonasteriesCount'
FROM Continents AS cn
JOIN Countries AS c ON c.ContinentCode = cn.ContinentCode
LEFT JOIN Monasteries AS m ON m.CountryCode = c.CountryCode
WHERE c.IsDeleted = 0
GROUP BY cn.ContinentName, c.CountryName
ORDER BY COUNT(m.Id) DESC, c.CountryName ASC










