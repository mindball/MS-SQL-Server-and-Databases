use Bank

---------------------------Problem 14. Create Table Logs

CREATE TABLE Logs
(
	LogId INT PRIMARY KEY IDENTITY,
	AccountId INT FOREIGN KEY REFERENCES Accounts(Id),
	OldSum DECIMAL(15, 2),
	NewSum DECIMAL(15, 2)
)


CREATE OR ALTER TRIGGER tr_InsertAccountInfo ON Accounts FOR UPDATE
AS
DECLARE @newSum DECIMAL(15, 2) = (SELECT Balance FROM inserted)
DECLARE @oldwSum DECIMAL(15, 2) = (SELECT Balance FROM deleted)
DECLARE @accountId INT = (SELECT Id FROM inserted)

INSERT INTO Logs (AccountId, NewSum, OldSum) VALUES
(@accountId, @newSum, @oldwSum)



UPDATE Accounts
SET Balance += 10
WHERE Id = 1

SELECT * FROM Logs

---------------------------15. Create Table Emails

CREATE TABLE NotificationEmails
(
	Id INT PRIMARY KEY IDENTITY,
	Recipient INT FOREIGN KEY REFERENCES Accounts(Id),
	[Subject] VARCHAR(MAX),
	Body VARCHAR(MAX)
)

CREATE TRIGGER tr_LogEmail ON Logs FOR INSERT
AS
DECLARE @newSum DECIMAL(15, 2) = (SELECT TOP(1) NewSum FROM inserted)
DECLARE @oldwSum DECIMAL(15, 2) = (SELECT TOP(1) OldSum FROM inserted)
DECLARE @accountId INT = (SELECT AccountId FROM inserted)
DECLARE @date VARCHAR(30) = CONVERT(VARCHAR(30), GETDATE(), 103)

INSERT INTO NotificationEmails (Recipient, [Subject], Body) VALUES
(
	@accountId
	,CONCAT_WS(' ', 'Balance change for account:', @accountId)
	,CONCAT_WS(' ', 'On', @date,  'your balance was changed from',  @oldwSum, 'to',  @newSum)
)

SELECT * FROM Accounts WHERE Id = 2

UPDATE Accounts
SET Balance += 1000
WHERE Id = 2

SELECT * FROM Logs
SELECT * FROM NotificationEmails

---------------------------16. Deposit Money
CREATE PROCEDURE usp_DepositMoney @accountId INT, @moneyAmount DECIMAL(15, 4)
AS
BEGIN TRANSACTION

DECLARE @account INT = (SELECT Id FROM Accounts WHERE Id = @accountId)

IF(@account IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid account ID!', 16, 1)
	RETURN
END

IF(@moneyAmount < 0)
BEGIN
	ROLLBACK
	RAISERROR('Negative ammount', 16, 2)
	RETURN
END

UPDATE Accounts
SET Balance += @moneyAmount
WHERE Id = @accountId
COMMIT


//3 ROW AFFECTED BECAUSE TABLE LOGS AND NOTIFICATIONEMAILS ARE LINKED
SELECT * FROM Accounts WHERE Id = 2
EXEC usp_DepositMoney 2, 1000.0000
SELECT * FROM Accounts WHERE Id = 2

---------------------------17. Withdraw Money Procedure

CREATE PROCEDURE usp_WithdrawMoney @accountId INT, @moneyAmount DECIMAL(15, 4)
AS
BEGIN TRANSACTION

DECLARE @account INT = (SELECT Id FROM Accounts WHERE Id = @accountId)

DECLARE @currentAmount DECIMAL(15, 4) = (SELECT Balance FROM Accounts WHERE Id = @accountId)

IF(@account IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid account ID!', 16, 1)
	RETURN
END

IF(@moneyAmount < 0)
BEGIN
	ROLLBACK
	RAISERROR('Negative ammount!', 16, 2)
	RETURN
END

IF(@currentAmount -  @moneyAmount > 0)
BEGIN
	ROLLBACK
	RAISERROR('bigger than current amount', 16, 3)
	RETURN
END

UPDATE Accounts
SET Balance -= @moneyAmount
WHERE Id = @accountId
COMMIT

SELECT * FROM Accounts
WHERE Id = 5

EXEC  usp_WithdrawMoney 5, 25.00

SELECT * FROM Accounts
WHERE Id = 5

---------------------------18. Money Transfer

CREATE PROC usp_TransferMoney @senderId INT, @receiverId INT, @amount DECIMAL(15, 4)
AS
BEGIN TRANSACTION

EXEC dbo.usp_WithdrawMoney @senderId, @amount
EXEC dbo.usp_DepositMoney @receiverId, @amount
COMMIT


SELECT * FROM Accounts WHERE Id = 1 OR Id = 2
EXEC usp_TransferMoney 1, 2, 100
SELECT * FROM Accounts WHERE Id = 1 OR Id = 2

---------------------------19.  Trigger

CREATE TRIGGER tr_InsertItemBySpecifiedLevel ON UserGameItems INSTEAD OF INSERT
AS
DECLARE @itemId INT = (SELECT ItemId FROM inserted)
DECLARE @userGameId INT = (SELECT UserGameId FROM inserted)

DECLARE @itemLevel INT = (SELECT MinLevel FROM Items WHERE Id = @itemId)
DECLARE @userGameLevel INT = (SELECT Level FROM UsersGames WHERE Id = @userGameId)

if(@userGameLevel >= @itemLevel)
BEGIN
	INSERT INTO UserGameItems (ItemId, UserGameId) VALUES
	(@itemId, @userGameId)
END

INSERT INTO UserGameItems (ItemId, UserGameId) VALUES
(14, 38)

SELECT * FROM UserGameItems WHERE ItemId = 14

CREATE PROC usp_BuyItem @userId INT, @itemId INT, @gameId INT
AS
BEGIN TRANSACTION
DECLARE @user INT = (SELECT Id FROM Users WHERE @userId = Id)
DECLARE @item INT = (SELECT Id FROM Items WHERE @itemId = Id)
DECLARE @game INT = (SELECT Id From UsersGames WHERE @gameId = GameId)

IF(@user IS NULL OR @item IS NULL OR @game IS NULL)
BEGIN 
	ROLLBACK
	RAISERROR('INVALID ARGUMENTS user, item OR game', 16, 1)
	RETURN
END

DECLARE @userCash DECIMAL(15, 2) = (SELECT Cash FROM UsersGameS WHERE @user = UserId AND GameId = @game)
DECLARE @itemPrice DECIMAL(15, 2) = (SELECT Price FROM Items WHERE Id = @item)

IF(@userCash - @itemPrice > 0)
BEGIN
	ROLLBACK
	RAISERROR('Insufficient funds', 16, 1)
	RETURN
END

UPDATE UsersGames
SET CASH -= @itemPrice
Where UserId = @user AND @game = GameId

INSERT UserGameItems (ItemId, UserGameId) VALUES
(@item, @game)

COMMIT

SELECT u.Username, g.Name, ug.Cash, i.Name
FROM Users AS u
JOIN UsersGames AS ug ON u.Id = ug.UserId
JOIN Games AS g ON ug.GameId = g.Id
JOIN UserGameItems AS ugt ON ug.Id = ugt.UserGameId
JOIN Items AS i ON ugt.ItemId = i.ItemTypeId
JOIN ItemTypes AS it ON it.Id = i.ItemTypeId
WHERE g.Name = 'Bali'
ORDER BY u.Username, i.Name

---------------------------Problem 21. Employees with Three Projects
CREATE PROC usp_AssignProject @emloyeeId INT, @projectID INT
AS
BEGIN TRANSACTION
DECLARE @employee INT = (SELECT EmployeeID FROM Employees WHERE EmployeeID = @emloyeeId)

IF(@employee IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid Employee ID', 16, 3)
END

DECLARE @project INT = (SELECT ProjectID FROM Projects WHERE ProjectID = @projectID)

IF(@employee IS NULL)
BEGIN
	ROLLBACK
	RAISERROR('Invalid Projects ID', 16, 2)
END

DECLARE @projectCount INT = 
(
	Select Count(ProjectID) 
	FROM EmployeesProjects AS ep 	
	WHERE @emloyeeId = ep.EmployeeID 
)

IF(@projectCount >= 3)
BEGIN
	ROLLBACK
	RAISERROR('The employee has too many projects!', 16, 1)
END

INSERT INTO EmployeesProjects(EmployeeID, ProjectID) VALUES
(@emloyeeId, @projectID)
COMMIT


SELECT * FROM EmployeesProjects ORDER BY EmployeeID


---------------------------Problem 22. Delete Employees

CREATE TABLE Deleted_Employees
(
	EmployeeId INT PRIMARY KEY IDENTITY
	, FirstName VARCHAR(30)
	, LastName VARCHAR(30)
	, MiddleName VARCHAR(30)
	, JobTitle VARCHAR(30)
	,DepartmentId INT
	, Salary DECIMAL(15, 2)
)

CREATE TRIGGER tr_addDeletedEmployees ON EmpLoyees FOR DELETE
AS
INSERT INTO Deleted_Employees(FirstName, LastName, MiddleName, JobTitle, DepartmentId, Salary)
SELECT FirstName, LastName, MiddleName, JobTitle, DepartmentId, Salary FROM deleted





