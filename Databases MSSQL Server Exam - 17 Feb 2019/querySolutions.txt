---------------------5. Teen Students
--Select all students who are teenagers (their age is above or equal to 12). 
--Order them by first name (alphabetically), then by last name (alphabetically). 
--Select their first name, last name and their age.

SELECT FirstName, LastName, Age
FROM Students
WHERE Age >= 12
ORDER BY FirstName, LastName

---------------------6. Cool Addresses
--Select all full names from students, whose address text contains ‘road’.
--Order them by first name (alphabetically), then by last name (alphabetically), 
--then by address text (alphabetically).

SELECT CONCAT(FirstName, ' ', MiddleName, ' ', LastName), [Address]
FROM Students
WHERE [Address] LIKE '%Road%'
ORDER BY FirstName, LastName, [Address]

---------------------7. 42 Phones
--Select students with middle names whose phones starts with 42. 
--Select their first name, address and phone number. Order them by first name alphabetically.

SELECT FirstName, [Address], Phone
FROM Students
WHERE Phone LIKE '42%' AND (MiddleName IS NOT NULL)
ORDER BY FirstName

---------------------8. Students Teachers
--Select all students and the count of teachers each one has. 

SELECT s.FirstName, s.LastName, COUNT(st.TeacherId)
FROM Students AS s
JOIN StudentsTeachers AS st ON st.StudentId = s.Id
GROUP BY s.FirstName, s.LastName

---------------------9. Subjects with Students
--Select all teachers’ full names and the subjects they teach with the count of lessons in each
--.Finally select the count of students each teacher has. Order them by students count descending,
--full name (ascending) and subjects (ascending).

SELECT t.FirstName + ' ' + t.LastName AS FullName
	,s.Name + '-' + CAST(s.Lessons AS nvarchar(5)) AS Subjects
	,COUNT(st.StudentId) AS Students
FROM Teachers AS t
JOIN Subjects AS s ON t.SubjectId = s.Id
JOIN StudentsTeachers AS st ON t.Id = st.TeacherId
GROUP BY t.FirstName, t.LastName, s.Name, s.Lessons
ORDER BY COUNT(st.StudentId) DESC, FullName, Subjects

---------------------10. Students to Go
--Find all students, who have not attended an exam. Select their full name (first name + last name).
--Order the results by full name (ascending).

SELECT s.FirstName + ' ' + s.LastName AS [Full Name] 
FROM Students AS s
LEFT JOIN StudentsExams AS se ON se.StudentId = s.Id
WHERE se.ExamId IS NULL
ORDER BY [Full Name] 

---------------------11. Busiest Teachers
--Find top 10 teachers with most students they teach. Select their first name,
--last name and the amount of students they have. Order them by students count 
--(descending), then by first name (ascending), then by last name (ascending).

SELECT TOP(10) t.FirstName, t.LastName, Count(st.StudentId) AS [StudentsCount]
FROM Teachers AS t
JOIN StudentsTeachers AS st ON st.TeacherId = t.Id
GROUP BY t.FirstName, t.LastName
ORDER BY Count(st.StudentId) DESC, t.FirstName, t.LastName

---------------------12. Top Students
--Find top 10 students, who have highest average grades from the exams.
--Format the grade, two symbols after the decimal point.
--Order them by grade (descending), then by first name (ascending), then by last name (ascending)

SELECT TOP 10 s.FirstName, s.LastName, CAST(AVG(se.Grade) AS DECIMAL(18, 2)) AS [Grade]
FROM Students AS s
JOIN StudentsExams AS se ON se.StudentId = s.Id
--JOIN Exams AS e ON e.Id = se.ExamId
GROUP BY s.FirstName, s.LastName
ORDER BY AVG(se.Grade) DESC, s.FirstName, s.LastName

---------------------13. Second Highest Grade
--Find the second highest grade per student from all subjects. 
--Sort them by first name (ascending), then by last name (ascending).

SELECT t.FirstName, t.LastName, t.Grade
FROM 
	(
		SELECT s.FirstName
			,s.LastName
			,ss.Grade
			,ROW_NUMBER() OVER (PARTITION BY FirstName, LastName ORDER BY Grade DESC) AS RowNumber
		FROM Students AS s
		JOIN StudentsSubjects AS ss ON ss.StudentId = s.Id
	) AS t
WHERE t.RowNumber = 2
ORDER BY t.FirstName, t.LastName

---------------------14. Not So In The Studying
--Find all students who don’t have any subjects. Select their full name. 
--The full name is combination of first name, middle name and last name. 
--Order the result by full name
--NOTE: If the middle name is null you have to concatenate the first 
--name and last name separated with single space.

SELECT 
	(
		s.FirstName + 
		(
		CASE WHEN MiddleName IS NULL THEN ' '
		ELSE (' ' + s.MiddleName + ' ')
		END
		) + 
		s.LastName
	)AS [Full Name]		 
FROM Students AS s
LEFT JOIN StudentsSubjects AS ss ON ss.StudentId = s.Id
WHERE ss.Id IS NULL
ORDER BY [Full Name]

---------------------15. Top Student per Teacher
--Find all teachers with their top students. The top student is the person 
--with highest average grade. Select teacher full name (first name + last name), 
--subject name, student full name (first name + last name) and corresponding grade. 
--The grade must be formatted to the second digit after the decimal point.
--Sort the results by subject name (ascending), then by teacher full name 
--(ascending), then by grade (descending)

--Author solution
SELECT j.[Teacher Full Name], j.SubjectName ,j.[Student Full Name], FORMAT(j.TopGrade, 'N2') AS Grade
  FROM (
		SELECT k.[Teacher Full Name],k.SubjectName, k.[Student Full Name], k.AverageGrade  AS TopGrade,
			 ROW_NUMBER() OVER (PARTITION BY k.[Teacher Full Name] ORDER BY k.AverageGrade DESC) AS RowNumber
		FROM (
				SELECT t.FirstName + ' ' + t.LastName AS [Teacher Full Name],
	 				s.FirstName + ' ' + s.LastName AS [Student Full Name],
	 				AVG(ss.Grade) AS AverageGrade,
	 				su.Name AS SubjectName
				FROM Teachers AS t 
				JOIN StudentsTeachers AS st ON st.TeacherId = t.Id
				JOIN Students AS s ON s.Id = st.StudentId
				JOIN StudentsSubjects AS ss ON ss.StudentId = s.Id
				JOIN Subjects AS su ON su.Id = ss.SubjectId AND su.Id = t.SubjectId
				GROUP BY t.FirstName, t.LastName, s.FirstName, s.LastName, su.Name
				) AS k
		) AS j
   WHERE j.RowNumber = 1 
ORDER BY j.SubjectName,j.[Teacher Full Name], TopGrade DESC

---------------------16. Average Grade per Subject
--Find the average grade for each subject. Select the subject name and the average grade. 
--Sort them by subject id (ascending).
SELECT avg.Name, avg.AverageGrade
	FROM 
	(
		SELECT s.Id, s.Name, AVG(ss.Grade) AS [AverageGrade]
		FROM Subjects AS s
		JOIN StudentsSubjects AS ss ON ss.SubjectId = s.Id
		GROUP BY s.Id, s.Name
	) AS [avg]
ORDER BY avg.Id

--Author solution
  SELECT s.Name, AVG(ss.Grade) AS AverageGrade
    FROM Subjects AS s
    JOIN StudentsSubjects AS ss ON ss.SubjectId = s.Id
GROUP BY s.Name, s.Id
ORDER BY s.Id

---------------------17. Exams Information
--Divide the year in 4 quarters using the exam dates. For each quarter
--get the subject name and the count of students who took the exam with grade
--more or equal to 4.00. If the date is missing, replace it with “TBA”. 
--Order them by quarter ascending.

SELECT k.QUARTER, k.SubjectName, COUNT(k.StudentId) AS StudentsCount
	FROM (
		 SELECT s.Name AS SubjectName
			,se.StudentId
			,CASE
			WHEN MONTH(e.Date) >= 1 AND MONTH(e.Date) <=3
				THEN 'Q1'
			WHEN MONTH(e.Date) >= 4 AND MONTH(e.Date) <=6
				THEN 'Q2'
			WHEN MONTH(e.Date) >= 7 AND MONTH(e.Date) <=9
				THEN 'Q3'
			WHEN MONTH(e.Date) >= 10 AND MONTH(e.Date) <=12
				THEN 'Q4'
			ELSE 'TBA'
			 END [QUARTER]
		FROM StudentsExams AS se
			JOIN Exams AS e ON e.Id = se.ExamId
			JOIN Subjects AS s ON e.SubjectId = s.Id
		WHERE se.Grade >= 4
		) AS k	
GROUP BY k.QUARTER, k.SubjectName
ORDER BY k.QUARTER

---------------------------------Section 4. Programmability (20 pts)
---------------------18. Exam Grades
--Create a user defined function, named udf_ExamGradesToUpdate(@studentId, @grade)
--, that receives a student id and grade.

CREATE FUNCTION udf_ExamGradesToUpdate(@studentId INT, @grade DECIMAL(15, 2))
RETURNS VARCHAR(MAX)
AS 
BEGIN
	DECLARE @currentStudent INT = (SELECT TOP 1 StudentId FROM StudentsExams WHERE @studentId = StudentId)
	IF(@currentStudent IS NULL)
	BEGIN
		RETURN 'The student with provided id does not exist in the school!'
	END	

	IF(@grade > 6.00)
	BEGIN
		RETURN 'Grade cannot be above 6.00!'
	END

	DECLARE @firstName NVARCHAR(20) = (SELECT TOP(1) FirstName FROM Students WHERE @studentId = Id)
	DECLARE @maxGrade DECIMAL(15,2) = @grade + 0.50;
	DECLARE @count INT = (SELECT COUNT(Grade) 
						FROM StudentsExams 						
						WHERE StudentId = @studentId AND (Grade BETWEEN @grade AND @maxGrade))
	RETURN ('You have to update ' + CAST(@count AS nvarchar(10)) + ' grades for the student ' + @firstName)
END

