CREATE FUNCTION udf_ProjectDurationWeeks(@StartDate DATETIME, @EndDate DATETIME)
RETURNS INT
AS 
BEGIN
	DECLARE @projectDuration INT
	IF(@EndDate IS NULL)
	BEGIN
		SET @EndDate = GETDATE()
	END

	SET @projectDuration = DATEDIFF(WEEK, @StartDate, @EndDate)
	RETURN @projectDuration
END

SELECT 
	[Name], dbo.udf_ProjectDurationWeeks(StartDate, EndDate) AS Duration
FROM Projects

-----------------------------------------------------------------------------

CREATE FUNCTION udf_AverageSalaryByDepartment()
RETURNS TABLE 
AS 
RETURN
(
	SELECT d.[Name], AVG(e.Salary) AS AverageSalary
	FROM Departments AS d
	JOIN Employees AS e ON d.DepartmentID = e.DepartmentID
	GROUP BY d.DepartmentID, d.[Name]
)

SELECT * FROM dbo.udf_AverageSalaryByDepartment()

-----------------------------------------------------------------------------

CREATE FUNCTION udf_EmployeeListByDepartment(@DepName nvarchar(20))
RETURNS @result TABLE(
	FirstName nvarchar(50) NOT NULL,
	LastName nvarchar(50) NOT NULL,
	JobTitle nvarchar(50) NOT NULL) AS
BEGIN
	WITH Employees_CTE (FirstName, LastName, DepartmentName)
	AS (
		SELECT e.FirstName, e.LastNaME, d.[Name]
		FROM Employees AS e
		LEFT JOIN Departments AS d ON d.DepartmentID = e.DepartmentID)

	INSERT INTO @result SELECT FirstName, LastName, DepartmentName
		FROM Employees_CTE WHERE DepartmentName = @DepName
	RETURN
END

SELECT * FROM dbo.udf_EmployeeListByDepartment('Production')

-----------------------------------------------------------------------------

CREATE FUNCTION ufn_GetSalaryLevel(@salary INT)
RETURNS NVARCHAR(10)
AS
BEGIN
	DECLARE @salaryLevel VARCHAR(10)
	IF (@salary < 30000)
		SET @salaryLevel = 'Low'
	ELSE IF(@salary >= 30000 AND @salary <= 50000)
		SET @salaryLevel = 'Average'
	ELSE
		SET @salaryLevel = 'High'
	RETURN @salaryLevel
End

SELECT FirstName, LastName, Salary,
dbo.udf_GetSalaryLevel(Salary) as SalaryLevel
FROM Employees

Procedure--------------------------------------------------------------------
CREATE PROCEDURE usp_GetSeniorEmployees
AS
SELECT * 
	FROM Employees
	WHERE DATEDIFF(YEAR, HireDate, GETDATE()) > 18

EXEC dbo.usp_GetSeniorEmployees

-----------------------------------------------------------------------------

CREATE OR ALTER PROCEDURE usp_GetSeniorEmployees
AS
SELECT 
	FirstName
	,LastName
	,DATEDIFF(YEAR, HireDate, GETDATE()) AS SummaryYears
	FROM Employees
	WHERE DATEDIFF(YEAR, HireDate, GETDATE()) > 18
	ORDER BY SummaryYears

EXEC dbo.usp_GetSeniorEmployees

--You could check if any objects depend on the stored procedure
--by executing the system stored procedure sp_depends
EXEC sp_depends 'usp_GetSeniorEmployees'

---------Stored Procedures Using Parameters----------------------------------

CREATE OR ALTER PROCEDURE usp_GetSeniorEmployees @SummaryYears INT = 19 --default value
AS
SELECT 
	FirstName
	,LastName
	,DATEDIFF(YEAR, HireDate, GETDATE()) AS SummaryYears
	FROM Employees
	WHERE DATEDIFF(YEAR, HireDate, GETDATE()) > @SummaryYears
	ORDER BY SummaryYears

EXEC dbo.usp_GetSeniorEmployees  --with default value

EXEC dbo.usp_GetSeniorEmployees 20

-------------------Returning Multiple Results--------------------------------

CREATE OR ALTER PROCEDURE usp_GetSeniorEmployees @SummaryYears INT = 19 --default value
	,@SecretText nvarchar(max)
AS
SELECT 
	FirstName
	,LastName
	,DATEDIFF(YEAR, HireDate, GETDATE()) AS SummaryYears
	FROM Employees
	WHERE DATEDIFF(YEAR, HireDate, GETDATE()) > @SummaryYears
	ORDER BY SummaryYears

	SELECT @SecretText AS SecretText

EXEC dbo.usp_GetSeniorEmployees 
	@SummaryYears = 19
	,@SecretText = 'test'


---------------------Returning Values Using OUTPUT Parameters-------------------------

CREATE PROCEDURE dbo.usp_AddNumbers
	@firstNumber SMALLINT
	,@secondNumber SMALLINT
	,@result INT OUTPUT
AS
	SET @result = @firstNumber + @secondNumber

DECLARE @answer smallintQ

EXECUTE usp_AddNumbers 5, 6, @answer OUTPUT

SELECT 'The result is: ', @answer
