--Part 1. Queries for SoftUni Database
--Problem 1. Employees with Salary Above 35000
CREATE PROCEDURE usp_GetEmployeesSalaryAbove35000
AS
SELECT FirstName, LastName 
	FROM Employees
	WHERE Salary > 35000

EXEC dbo.usp_GetEmployeesSalaryAbove35000

--Problem 2. Employees with Salary Above Number

CREATE PROCEDURE usp_GetEmployeesSalaryAboveNumber @Number DECIMAL(18,4)
AS
SELECT FirstName, LastName 
	FROM Employees
	WHERE Salary >= @Number

EXEC usp_GetEmployeesSalaryAboveNumber 48100

--Problem 3. Town Names Starting With

CREATE PROCEDURE usp_GetTownsStartingWith @StartingStr VARCHAR(20)
AS
SELECT [Name] as Town
	FROM Towns
	WHERE [Name] LIKE @StartingStr + '%'

EXEC dbo.usp_GetTownsStartingWith 'b'

--Problem 4. Employees from Town

CREATE PROCEDURE usp_GetEmployeesFromTown @Town VARCHAR(30)
AS
SELECT FirstName, LastName
	FROM Employees AS e
	JOIN Addresses AS a ON a.AddressID = e.AddressID
	JOIN Towns AS t ON t.TownID = a.TownID
	WHERE t.Name = @Town

EXEC usp_GetEmployeesFromTown 'Sofia'

--Problem 5. Salary Level Function

REATE FUNCTION ufn_GetSalaryLevel(@salary DECIMAL(18,4))
RETURNS NVARCHAR(10)
AS
BEGIN
	DECLARE @salaryLevel VARCHAR(10)
	IF (@salary < 30000)
		SET @salaryLevel = 'Low'
	ELSE IF(@salary >= 30000 AND @salary <= 50000)
		SET @salaryLevel = 'Average'
	ELSE
		SET @salaryLevel = 'High'
	RETURN @salaryLevel
End

SELECT Salary,
dbo.udf_GetSalaryLevel(Salary) as SalaryLevel
FROM Employees

--Problem 6. Employees by Salary Level

CREATE OR ALTER PROCEDURE usp_EmployeesBySalaryLevel @SalaryLevel CHAR(10)
AS
SELECT FirstName, LastName
	FROM Employees AS e
	WHERE @SalaryLevel = dbo.ufn_GetSalaryLevel(Salary)
	
	

EXEC dbo.usp_EmployeesBySalaryLevel 'High'

--Problem 7. Define Function

CREATE FUNCTION ufn_IsWordComprised(@setOfLetters VARCHAR(MAX), @word VARCHAR(MAX))
RETURNS BIT
BEGIN
	DECLARE @count INT = 1
	WHILE(@COUNT <= LEN(@word))
	BEGIN
		DECLARE @currentLetter CHAR(1) = SUBSTRING(@word, @count, 1)
		DECLARE @charIndex INT = CHARINDEX(@currentLetter, @setOfLetters)

		IF(@charIndex = 0)
		RETURN 0

		SET @count += 1
	END
RETURN 1
END

--Problem 8. * Delete Employees and Departments

--Part 2. Queries for Bank Database

CREATE DATABASE Bank
GO
USE Bank
GO
CREATE TABLE AccountHolders
(
Id INT NOT NULL,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
SSN CHAR(10) NOT NULL
CONSTRAINT PK_AccountHolders PRIMARY KEY (Id)
)

CREATE TABLE Accounts
(
Id INT NOT NULL,
AccountHolderId INT NOT NULL,
Balance MONEY DEFAULT 0
CONSTRAINT PK_Accounts PRIMARY KEY (Id)
CONSTRAINT FK_Accounts_AccountHolders FOREIGN KEY (AccountHolderId) REFERENCES AccountHolders(Id)
)

INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (1, 'Susan', 'Cane', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (2, 'Kim', 'Novac', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (3, 'Jimmy', 'Henderson', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (4, 'Steve', 'Stevenson', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (5, 'Bjorn', 'Sweden', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (6, 'Kiril', 'Petrov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (7, 'Petar', 'Kirilov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (8, 'Michka', 'Tsekova', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (9, 'Zlatina', 'Pateva', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (10, 'Monika', 'Miteva', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (11, 'Zlatko', 'Zlatyov', '1234567890');
INSERT INTO AccountHolders (Id, FirstName, LastName, SSN) VALUES (12, 'Petko', 'Petkov Junior', '1234567890');

INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (1, 1, 123.12);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (2, 3, 4354.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (3, 12, 6546543.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (4, 9, 15345.64);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (5, 11, 36521.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (6, 8, 5436.34);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (7, 10, 565649.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (8, 11, 999453.50);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (9, 1, 5349758.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (10, 2, 543.30);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (11, 3, 10.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (12, 7, 245656.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (13, 5, 5435.32);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (14, 4, 1.23);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (15, 6, 0.19);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (16, 2, 5345.34);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (17, 11, 76653.20);
INSERT INTO Accounts (Id, AccountHolderId, Balance) VALUES (18, 1, 235469.89);

--Problem 9. Find Full Name



--Problem 10. People with Balance Higher Than

CREATE PROCEDURE usp_GetHoldersWithBalanceHigherThan @salaryNumber DECIMAL(18, 4)
AS
SELECT k.[First Name], k.[Last Name] 
FROM
(
	SELECT ah.Id, ah.FirstName AS 'First Name'
	,ah.LastName AS 'Last Name'
	FROM AccountHolders AS ah
	JOIN Accounts AS a ON ah.Id = a.AccountHolderId
	GROUP BY ah.Id, ah.FirstName, ah.LastName --AKO TUKA NQMA ID HORA S EDNI I SUSHTI IMENA TOTALA SHTE SE SUMIRA
	HAVING SUM(a.Balance) > @salaryNumber	
	) AS k
	ORDER BY k.[First Name], k.[Last Name]

--Problem 11. Future Value Function

CREATE FUNCTION ufn_CalculateFutureValue (@sum DECIMAL(18, 4)
, @yearlyInterestRate FLOAT, @numberOfYears INT)
RETURNS DECIMAL(18, 4)
BEGIN
	RETURN @sum * POWER((1 + @yearlyInterestRate), @numberOfYears)
END

SELECT dbo.ufn_CalculateFutureValue(1000, 0.1, 5)

--Problem 12. Calculating Interest

CREATE PROC usp_CalculateFutureValueForAccount @accountId INT
, @interestRate FLOAT
AS
SELECT a.Id
	, ah.FirstName
	, ah.LastName
	, a.Balance
	, dbo.ufn_CalculateFutureValue(a.Balance, @interestRate, 5)
FROM Accounts AS a
JOIN AccountHolders AS ah ON ah.Id = a.Id
WHERE a.Id = @accountId

EXEC usp_CalculateFutureValueForAccount 1, 0.1

--Part 3. Queries for Diablo Database

--Problem 13. *Scalar Function: Cash in User Games Odd Rows

CREATE FUNCTION ufn_CashInUsersGames (@gameName VARCHAR (MAX))
RETURNS TABLE
RETURN (
	SELECT SUM(k.Cash) AS TotalCash
	FROM (
		SELECT g.[Name], ug.Cash,
			ROW_NUMBER() OVER (ORDER BY Cash DESC) AS RowNumber
			FROM Games AS g
			JOIN UsersGames AS ug ON ug.GameId = g.Id
			WHERE g.Name = @gameName
	) AS k
	WHERE k.RowNumber % 2 = 1
)

