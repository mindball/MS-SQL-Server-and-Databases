-----------------------------1.	Database Design Section 1. DDL 
CREATE TABLE Planes
(Id      INT
 PRIMARY KEY IDENTITY, 
 [Name]  VARCHAR(30) NOT NULL, 
 Seats   INT NOT NULL, 
 [Range] INT NOT NULL
);

CREATE TABLE Flights
(Id            INT
 PRIMARY KEY IDENTITY, 
 DepartureTime DATETIME2, 
 ArrivalTime   DATETIME2, 
 [Origin]      VARCHAR(50) NOT NULL, 
 [Destination] VARCHAR(50) NOT NULL, 
 PlaneId       INT NOT NULL
                   FOREIGN KEY REFERENCES Planes(Id)
);

CREATE TABLE Passengers
(Id         INT
 PRIMARY KEY IDENTITY, 
 FirstName  VARCHAR(30) NOT NULL, 
 LastName   VARCHAR(30) NOT NULL, 
 Age        INT NOT NULL, 
 Address    VARCHAR(30) NOT NULL, 
 PassportId CHAR(11) NOT NULL
);

CREATE TABLE LuggageTypes
(Id     INT
 PRIMARY KEY IDENTITY, 
 [Type] VARCHAR(30) NOT NULL
);

CREATE TABLE Luggages
(Id            INT
 PRIMARY KEY IDENTITY, 
 LuggageTypeId INT NOT NULL
                   FOREIGN KEY REFERENCES LuggageTypes(Id), 
 PassengerId   INT NOT NULL
                   FOREIGN KEY REFERENCES Passengers(Id),
);

CREATE TABLE Tickets
(Id            INT
 PRIMARY KEY IDENTITY, 
 PassengerId   INT NOT NULL
                   FOREIGN KEY REFERENCES Passengers(Id), 
 FlightId      INT NOT NULL
                   FOREIGN KEY REFERENCES Flights(Id), 
 LuggageId INT NOT NULL
                   FOREIGN KEY REFERENCES Luggages(Id), 
 Price         DECIMAL(18, 2) NOT NULL
);

-----------------------------2.	Insert
INSERT INTO Planes ([Name], Seats, [Range]) VALUES
	('Airbus 336', 112, 5132),
	('Airbus 330', 432, 5325),
	('Boeing 369', 231, 2355),
	('Stelt 297', 254, 2143),
	('Boeing 338', 165, 5111),
	('Airbus 558', 387, 1342),
	('Boeing 128', 345, 5541)

INSERT INTO LuggageTypes ([Type]) Values
	('Crossbody Bag'),
	('School Backpack'),
	('Shoulder Bag')


-----------------------------3.	Update
--Make all flights to "Carlsbad" 13% more expensive

UPDATE Tickets
SET Price *= 1.13
FROM  Tickets AS t
	JOIN Flights AS f ON t.FlightId = f.Id
WHERE f.Destination = 'Carlsbad'

UPDATE dbo.Tickets
  SET 
      dbo.Tickets.Price*=1.13
WHERE dbo.Tickets.FlightId IN
(
    SELECT f.Id
    FROM dbo.Flights f
    WHERE f.Destination = 'Carlsbad'
);


-----------------------------4.	Delete
--Delete all flights to " Ayn Halagim ".

DECLARE @flightId int = (SELECT f.Id FROM dbo.Flights f WHERE f.Destination = 'Ayn Halagim')

DELETE FROM dbo.Tickets
WHERE dbo.Tickets.FlightId = @flightId

-----------------------------5.	The "Tr" Planes
--Select all of the planes, which name contains "tr". 
--Order them by id (ascending), name (ascending), seats (ascending) and range (ascending).

SELECT *
FROM Planes
WHERE Name LIKE '%tr%'
ORDER BY Id, [Name], Seats, Range

-----------------------------6.	Flight Profits
--Select the total profit for each flight from database. Order them by total price 
--(descending), flight id (ascending).

SELECT f.Id, Sum(t.Price)
FROM Flights AS f
JOIN Tickets AS t ON f.Id = t.FlightId
GROUP BY f.Id
ORDER BY Sum(t.Price) DESC, f.Id ASC

-----------------------------7.	Passenger Trips
--Select the full name of the passengers with their trips (origin - destination).
--Order them by full name (ascending), origin (ascending) and destination (ascending).

SELECT CONCAT(p.FirstName, ' ', p.LastName) AS [Full Name], f.Origin, f.Destination
FROM Passengers AS p
JOIN Tickets AS t ON t.PassengerId = p.Id
JOIN Flights AS f ON t.FlightId = f.Id
ORDER BY [Full Name] ASC, f.Origin, f.Destination

-----------------------------8.	Non Adventures People
--Select all people who don't have tickets. Select their first name, last name and age.
--Order them by age (descending), first name (ascending) and last name (ascending).

SELECT p.FirstName, p.LastName, p.Age
FROM Passengers AS p
LEFT JOIN Tickets AS t ON p.Id = t.PassengerId
WHERE t.Id IS NULL
ORDER BY p.Age DESC, p.FirstName ASC, p.LastName ASC

-----------------------------9.	Full Info
--Select all passengers who have trips. Select their full name 
--(first name – last name), plane name, trip (in format {origin} - {destination})
--and luggage type. Order the results by full name (ascending), name (ascending), 
--origin (ascending), destination (ascending) and luggage type (ascending).

SELECT CONCAT(p.FirstName, ' ', p.LastName) AS [Full Name]
	,pl.Name AS [Plane Name]
	,CONCAT(f.Origin, ' - ', f.Destination) AS [Trip]
	,lt.Type AS [Luggage Type]
FROM Passengers AS p
	JOIN Tickets AS t ON p.Id = t.PassengerId	
	JOIN Flights AS f ON t.FlightId = f.Id
	JOIN Planes AS pl ON pl.Id = f.PlaneId
	JOIN Luggages AS l ON t.LuggageId = l.Id
	JOIN LuggageTypes AS lt ON lt.Id = l.LuggageTypeId
ORDER BY [Full Name] ASC	
	,[Plane Name] ASC
	,f.Origin ASC
	,f.Destination ASC
	,[Luggage Type] ASC

-----------------------------10.	PSP
--Select all planes with their name, seats count and passengers count. 
--Order the results by passengers count (descending), plane name (ascending) and seats (ascending) 

SELECT pl.[Name], pl.Seats,COUNT(t.PassengerId) AS [Passengers Count]
	FROM Planes AS pl
		LEFT JOIN Flights AS f ON f.PlaneId = pl.Id
		LEFT JOIN Tickets AS t ON t.FlightId = f.Id
		LEFT JOIN Passengers AS p ON t.PassengerId = p.Id
		GROUP BY pl.[Name], pl.Seats
		ORDER BY COUNT(p.Id) DESC, pl.[Name] ASC, pl.Seats ASC


-----------------------------Section 4. Programmability (20 pts)
--11.	Vacation
--Create a user defined function, named udf_CalculateTickets(@origin, @destination, @peopleCount)
--that receives an origin (town name), destination (town name) and people count.
--The function must return the total price in format "Total price {price}"
--•	If people count is less or equal to zero return – "Invalid people count!"
--•	If flight is invalid return – "Invalid flight!"

CREATE FUNCTION udf_CalculateTickets(@origin VARCHAR(50)
				, @destination VARCHAR(50), @peopleCount INT)
RETURNS VARCHAR(30)
AS 
BEGIN
	DECLARE @validOrigin VARCHAR(50) = 
		(
			SELECT Origin
			FROM Flights
			WHERE Origin = @origin
		)
	DECLARE @validDestination VARCHAR(50) = 
		(
			SELECT Destination
			FROM Flights
			WHERE Destination = @destination
		)
	IF(@validOrigin IS NULL OR @validDestination IS NULL)
		BEGIN
			RETURN 'Invalid flight!'
		END
	IF(@peopleCount <= 0 OR @peopleCount IS NULL)
	BEGIN
		RETURN 'Invalid people count!'
	END

	DECLARE @ticketPrice DECIMAL(18, 2)= 
		(
			SELECT t.Price
			FROM Flights AS f
			JOIN Tickets AS t ON t.FlightId = f.Id
			WHERE f.Origin = @origin AND f.Destination = @destination
		)
	RETURN 'Total price ' + CAST((@ticketPrice *  @peopleCount) AS varchar)
END

SELECT dbo.udf_CalculateTickets('Kolyshley','Rancabolang', 33)

SELECT dbo.udf_CalculateTickets('Kolyshley','Rancabolang', -1)

SELECT dbo.udf_CalculateTickets('Invalid','Rancabolang', 33)

	




