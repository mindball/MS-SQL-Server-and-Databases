INSERT INTO Orders (OrderName, OrderNo) VALUES ('My first order', 1)
INSERT INTO Orders (OrderName, OrderNo) VALUES ('My second order', 2)
INSERT INTO Orders (OrderName, OrderNo) VALUES ('My NULL order', NULL)
INSERT INTO Orders (OrderName, OrderNo) VALUES (Null, 3)

INSERT INTO Items (ItemName, OrderName, OrderNumber) VALUES
('Mouse', 'My First Order', 1)
INSERT INTO Items (ItemName, OrderName, OrderNumber) VALUES
('Keyboard', 'My Non Existing  Order', 43)
INSERT INTO Items (ItemName, OrderName, OrderNumber) VALUES
('Monitor', NULL, 2)
INSERT INTO Items (ItemName, OrderName, OrderNumber) VALUES
('Computer', 'My First Order', 1)

--Inner Join
SELECT * FROM Orders
SELECT * FROM Items

SELECT * FROM Orders AS o
JOIN Items AS i ON o.OrderNo = i.OrderNumber

--Left Join
SELECT * FROM Orders
SELECT * FROM Items

SELECT * FROM Orders AS o
LEFT JOIN Items AS i ON o.OrderNo = i.OrderNumber

--Right Join
SELECT * FROM Orders
SELECT * FROM Items

SELECT * FROM Orders AS o
RIGHT JOIN Items AS i ON o.OrderNo = i.OrderNumber

--Full join
SELECT * FROM Orders
SELECT * FROM Items

SELECT * FROM Orders AS o
FULL JOIN Items AS i ON o.OrderNo = i.OrderNumber

--Display address information of all employees in "SoftUni" database.
SELECT TOP 50 FirstName, LastName, t.Name AS [Town], a.AddressText 
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
JOIN Towns t ON a.TownID = t.TownID
ORDER BY e.FirstName, e.LastName

--Find all employees that are in the "Sales" department. Use "SoftUni" database.
SELECT EmployeeID, FirstName, LastName, d.Name AS DepartmentName
FROM Employees AS e
JOIN Departments as d ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'

--SAME RESULT BUT ANOTHER SOLUTION - MUST BE MORE OPTIMIZE !!!
SELECT EmployeeID, FirstName, LastName, d.Name AS DepartmentName
FROM Employees AS e
JOIN Departments as d ON e.DepartmentID = d.DepartmentID AND d.[Name] = 'Sales'

--Show all employees that: 
-----Are hired after 1/1/1999
-----Are either in "Sales" or "Finance" department
--Sorted by HireDate (ascending).
SELECT e.FirstName, e.LastName, e.HireDate, d.Name AS DeptName
FROM Employees AS e
JOIN Departments as d ON e.DepartmentID = d.DepartmentID 
	AND (d.[Name] = 'Sales' OR d.[Name] = 'Finance')
WHERE e.HireDate > '1/1/1999'
ORDER BY e.HireDate


--Display information about employee's manager and employee's department .
--Show only the first 50 employees.
--Sort by EmployeeID (ascending).

SELECT TOP 50 e.EmployeeID
	,(e.FirstName + ' ' + e.LastName) AS 'EmployeeName'
	, (me.FirstName + ' ' + me.LastName) AS 'ManagerName'
	, d.Name AS 'DepartmentName'
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
JOIN Employees AS me ON me.EmployeeID = e.ManagerID
ORDER BY e.EmployeeID

--second solution
SELECT TOP 50
e.EmployeeID,
e.FirstName + ' ' + e.LastName AS EmployeeName, --cross table selection
m.FirstName + ' ' + m. LastName AS ManagerName, --cross table selection
d.Name AS DepartmentName
FROM Employees AS e
LEFT JOIN Employees AS m ON m.EmployeeID = e.ManagerID --self join
LEFT JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
ORDER BY e.EmployeeID ASC

--third solution
SELECT TOP 50 e.EmployeeID
	,CONCAT(e.FirstName, ' ', e.LastName) AS 'EmployeeName'
	,CONCAT(me.FirstName, ' ', me.LastName) AS 'ManagerName'
	,d.Name AS 'DepartmentName'
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
LEFT JOIN Employees AS me ON e.ManagerID = me.EmployeeID
ORDER BY e.EmployeeID

--Subquery

SELECT *
FROM Employees AS e
WHERE e.DepartmentID IN
	(
		SELECT d.DepartmentID
		FROM Departments AS d
		WHERE d.Name = 'Finance'
)

--Display lowest average salary of all departments.
	--Calculate average salary for each department.
	--Then show the value of smallest one.

SELECT MIN(a.AverageSalary) AS MinAverageSalary
FROM
(
	SELECT e.DepartmentID
	,AVG(e.Salary) AS AverageSalary
	FROM Employees AS e
	GROUP BY e.DepartmentID	
) AS A
--SECOND
SELECT TOP 1 AVG(e.Salary) AS AverageSalary
	FROM Employees AS e
	GROUP BY e.DepartmentID
	ORDER BY AverageSalary

