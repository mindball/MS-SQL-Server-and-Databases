--Problem 1.	Employee Address
SELECT TOP 5 e.EmployeeID, e.JobTitle, a.AddressID, a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
ORDER BY a.AddressID

--Problem 2.	Addresses with Towns
SELECT TOP 50 e.FirstName, e.LastName, t.Name, a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
JOIN Towns AS t ON a.TownID = t.TownID
ORDER BY e.FirstName, e.LastName

--Problem 3.	Sales Employee
SELECT EmployeeID, FirstName, LastName, d.Name AS DepartmentName
FROM Employees AS e
JOIN Departments as d ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'

--Problem 4.	Employee Departments
SELECT TOP 5 e.EmployeeID, e.FirstName, e.Salary, d.Name AS DepartmentName
FROM Employees AS e
JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
WHERE e.Salary > 15000
ORDER BY d.DepartmentID

--Problem 5.	Employees Without Project

SELECT TOP (3) e.EmployeeID,
               e.FirstName			  
FROM Employees AS e
     LEFT OUT JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
WHERE ep.EmployeeID IS NULL
ORDER BY e.EmployeeID; 

--Problem 6.	Employees Hired After

SELECT e.FirstName, e.LastName, e.HireDate, d.Name AS DeptName
FROM Employees AS e
JOIN Departments as d ON e.DepartmentID = d.DepartmentID 
	AND (d.[Name] = 'Sales' OR d.[Name] = 'Finance')
WHERE e.HireDate > '1/1/1999'
ORDER BY e.HireDate

--Problem 7.	Employees with Project
SELECT TOP 5 e.EmployeeID, e.FirstName, pr.Name
FROM Employees AS e
JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects AS pr ON pr.ProjectID = ep.ProjectID
WHERE pr.StartDate >
(
    SELECT CONVERT(DATE, '13.08.2002', 103)
) AND pr.EndDate IS NULL
ORDER BY e.EmployeeID; 


--Problem 8.	Employee 24

SELECT e.EmployeeID, e.FirstName
	,CASE 
		WHEN pr.StartDate > '2005' THEN NULL
		ELSE pr.Name
		END
FROM Employees AS e
JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects AS pr ON pr.ProjectID = ep.ProjectID
WHERE e.EmployeeID = 24

--Problem 9.	Employee Manager ???
SELECT e.EmployeeID, e.FirstName, e.ManagerID, em.FirstName AS [ManagerName]
FROM Employees AS e
JOIN Employees AS em ON e.ManagerID = em.EmployeeID
WHERE e.ManagerID IN (3, 7)
ORDER BY e.EmployeeID

--Problem 10.	Employee Summary
SELECT TOP 50 
	e.EmployeeID
	,CONCAT(e.FirstName, ' ', e.LastName)
	,CONCAT(em.FirstName, ' ', em.LastName)
	,d.Name
FROM Employees AS e
JOIN Employees AS em ON e.ManagerID = em.EmployeeID
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
ORDER BY e.EmployeeID

--Problem 11.	Min Average Salary
SELECT TOP 1 AVG(Salary) AS s
FROM Employees 
GROUP BY DepartmentID
ORDER BY s

--Problem 12.	Highest Peaks in Bulgaria+
USE Geography

SELECT c.CountryCode
	,m.MountainRange
	,p.PeakName
	,p.Elevation
FROM Countries AS c
	JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
	JOIN Mountains AS m ON mc.MountainId = m.Id
	JOIN Peaks AS p ON mc.MountainId = p.MountainId
WHERE c.CountryCode = 'BG' 
	AND p.Elevation > 2835
ORDER BY p.Elevation DESC

--Problem 13.	Count Mountain Ranges
SELECT c.CountryCode
	,COUNT(mc.CountryCode) AS [MountainRange]
	--,m.MountainRange
FROM Countries AS c
	JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode	
WHERE c.CountryCode IN ('BG', 'RU', 'US')
GROUP BY c.CountryCode

--Problem 14.	Countries with Rivers
SELECT TOP 5 c.CountryName
	, r.RiverName
FROM Countries AS c
	lEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
	LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
WHERE c.ContinentCode = 'AF'
ORDER BY c.CountryName

--Problem 15.	*Continents and Currencies

SELECT MostUsedCurrency.ContinentCode,
       MostUsedCurrency.CurrencyCode,
       MostUsedCurrency.CurrencyUsage
FROM
(SELECT c.ContinentCode
	, c.CurrencyCode
	, COUNT(c.CurrencyCode) AS CurrencyUsage
	, DENSE_RANK() OVER 
	(PARTITION BY c.ContinentCode ORDER BY COUNT(c.CurrencyCode) DESC) AS [Rank]
	FROM Countries AS c
GROUP BY c.ContinentCode, c.CurrencyCode
HAVING COUNT(c.CurrencyCode) > 1
) AS MostUsedCurrency
WHERE MostUsedCurrency.[Rank] = 1
ORDER BY MostUsedCurrency.ContinentCode; 

--Problem 16.	Countries without any Mountains
SELECT COUNT(c.CountryCode) AS Count
FROM Countries AS c
LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
WHERE mc.MountainId IS NULL
GROUP BY mc.MountainId

--Problem 17.	Highest Peak and Longest River by Country
SELECT TOP 5 
	b.CountryName, 
	maxp as HighestPeakElevation, 
	maxr as LongestRiverLength
	FROM
		(
		SELECT c1.CountryName 
			,MAX(r.Length) AS maxr
			FROM Rivers AS r
			JOIN CountriesRivers AS cr ON cr.RiverId = r.Id
			JOIN Countries AS c1 ON cr.CountryCode = c1.CountryCode
		GROUP BY c1.CountryName
		) AS a
	JOIN
		(
		SELECT c2.CountryName
			,MAX(p.Elevation) AS maxp
			FROM Peaks AS p
			JOIN MountainsCountries AS m ON p.MountainId = m.MountainId
			JOIN Countries AS c2 ON M.CountryCode = c2.CountryCode
		GROUP BY c2.CountryName
		) AS b
		ON a.CountryName = b.CountryName
ORDER BY maxp DESC, maxr DESC, b.CountryName

--second solution
SELECT c.CountryName
	, MAX(p.Elevation) AS HighestPeakElevation
	, MAX(r.Length) AS LongestRiverLength
	FROM Countries AS c
	LEFT JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
	LEFT JOIN Mountains AS m ON m.Id = mc.MountainId
	LEFT JOIN Peaks AS p ON p.MountainId = m.Id
	LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
	LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY c.CountryName
ORDER BY HighestPeakElevation DESC, LongestRiverLength DESC, c.CountryName

--THIRD SOLUTION RAstardzhiev
SELECT  peaks.CountryName,
               peaks.Elevation AS HighestPeakElevation,
               rivers.Length AS LongestRiverLength
FROM
(
    SELECT c.CountryName,
           c.CountryCode,
           DENSE_RANK() OVER(PARTITION BY c.CountryName ORDER BY p.Elevation DESC) AS DescendingElevationRank,
           p.Elevation
    FROM Countries AS c
         FULL OUTER JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
         FULL OUTER JOIN Mountains AS m ON mc.MountainId = m.Id
         FULL OUTER JOIN Peaks AS p ON m.Id = p.MountainId
) AS peaks
FULL OUTER JOIN
(
    SELECT c.CountryName,
           c.CountryCode,
           DENSE_RANK() OVER(PARTITION BY c.CountryCode ORDER BY r.Length DESC) AS DescendingRiversLenghRank,
           r.Length
    FROM Countries AS c
         FULL OUTER JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
         FULL OUTER JOIN Rivers AS r ON cr.RiverId = r.Id
) AS rivers ON peaks.CountryCode = rivers.CountryCode
WHERE peaks.DescendingElevationRank = 1
      AND rivers.DescendingRiversLenghRank = 1
      AND (peaks.Elevation IS NOT NULL
           OR rivers.Length IS NOT NULL)
ORDER BY HighestPeakElevation DESC,
         LongestRiverLength DESC,
         CountryName; 	








	

